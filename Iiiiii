from flask import Flask, request, jsonify, redirect, url_for, session
from flask_sqlalchemy import SQLAlchemy
from werkzeug.security import generate_password_hash, check_password_hash
import secrets

app = Flask(__name__)
app.secret_key = "supersecret"  # change in production
app.config["SQLALCHEMY_DATABASE_URI"] = "sqlite:///users.db"
db = SQLAlchemy(app)

# Example User model
class User(db.Model):
    id = db.Column(db.Integer, primary_key=True)
    username = db.Column(db.String(80), unique=True, nullable=True)
    email = db.Column(db.String(120), unique=True, nullable=True)
    phone = db.Column(db.String(20), unique=True, nullable=True)
    password_hash = db.Column(db.String(200), nullable=True)
    provider = db.Column(db.String(50), nullable=True)  # "local", "google", etc.

# -----------------------
# 1. Username + Password
# -----------------------

@app.route("/register", methods=["POST"])
def register():
    data = request.json
    hashed_pw = generate_password_hash(data["password"])
    user = User(username=data["username"], email=data["email"], password_hash=hashed_pw, provider="local")
    db.session.add(user)
    db.session.commit()
    return jsonify({"message": "User registered"}), 201


@app.route("/login", methods=["POST"])
def login():
    data = request.json
    user = User.query.filter_by(username=data["username"]).first()
    if user and check_password_hash(user.password_hash, data["password"]):
        session["user_id"] = user.id
        return jsonify({"message": "Login successful"})
    return jsonify({"error": "Invalid credentials"}), 401


@app.route("/logout")
def logout():
    session.pop("user_id", None)
    return jsonify({"message": "Logged out"})


# -----------------------
# 2. Email/Phone + OTP
# -----------------------

# Pretend store for OTPs
otp_store = {}

@app.route("/otp/request", methods=["POST"])
def request_otp():
    data = request.json
    identifier = data.get("email") or data.get("phone")
    if not identifier:
        return jsonify({"error": "Email or phone required"}), 400

    otp = secrets.token_hex(3)  # just a mock, replace w/ real OTP (6-digit)
    otp_store[identifier] = otp

    # In reality: send via email or SMS
    print(f"DEBUG OTP for {identifier}: {otp}")

    return jsonify({"message": f"OTP sent to {identifier}"})


@app.route("/otp/verify", methods=["POST"])
def verify_otp():
    data = request.json
    identifier = data.get("email") or data.get("phone")
    otp = data.get("otp")

    if otp_store.get(identifier) == otp:
        user = User.query.filter(
            (User.email == identifier) | (User.phone == identifier)
        ).first()
        if not user:
            # auto-create account if not exist
            user = User(email=identifier if "@" in identifier else None,
                        phone=identifier if identifier.isdigit() else None,
                        provider="otp")
            db.session.add(user)
            db.session.commit()
        session["user_id"] = user.id
        return jsonify({"message": "OTP login successful"})
    return jsonify({"error": "Invalid OTP"}), 401


# -----------------------
# 3. Social Login (OAuth)
# -----------------------

@app.route("/login/<provider>")
def oauth_login(provider):
    """
    Redirect user to provider's login page (Google, GitHub, etc.)
    """
    # Use a library like `authlib` or `flask-dance`
    return redirect(f"https://provider.com/oauth/authorize?client_id=...&redirect_uri={url_for('oauth_callback', provider=provider, _external=True)}")


@app.route("/callback/<provider>")
def oauth_callback(provider):
    """
    Handle callback from provider, exchange code for token, fetch user profile.
    """
    # Mock example (replace with actual OAuth2 flow)
    profile = {"id": "123", "email": "user@example.com"}

    user = User.query.filter_by(email=profile["email"]).first()
    if not user:
        user = User(email=profile["email"], provider=provider)
        db.session.add(user)
        db.session.commit()

    session["user_id"] = user.id
    return jsonify({"message": f"Logged in with {provider}"})


# -----------------------
# Utility
# -----------------------

@app.route("/me")
def me():
    user_id = session.get("user_id")
    if not user_id:
        return jsonify({"error": "Not logged in"}), 401
    user = User.query.get(user_id)
    return jsonify({"id": user.id, "username": user.username, "email": user.email, "provider": user.provider})


if __name__ == "__main__":
    db.create_all()
    app.run(debug=True)
